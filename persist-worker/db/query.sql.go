// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const batchInsertUserToChannelChat = `-- name: BatchInsertUserToChannelChat :exec
INSERT INTO user_to_channel_chat_mapping (content, reply_of, from_user_id, channel_id, type, time_at)
SELECT
    u_content,
    u_reply_of,
    u_from_user_id,
    u_channel_id,
    u_type::message_type,
        u_time_at
FROM unnest($1::TEXT[]) WITH ORDINALITY AS t1(u_content, ord),
     unnest(ARRAY(SELECT CASE WHEN x = 0 THEN NULL ELSE x END FROM unnest($2::BIGINT[]) AS x)) WITH ORDINALITY AS t2(u_reply_of, ord),
     unnest($3::BIGINT[]) WITH ORDINALITY AS t3(u_from_user_id, ord),
     unnest($4::BIGINT[]) WITH ORDINALITY AS t4(u_channel_id, ord),
     unnest($5::TEXT[]) WITH ORDINALITY AS t5(u_type, ord),
     unnest($6::BIGINT[]) WITH ORDINALITY AS t6(u_time_at, ord)
WHERE t1.ord = t2.ord
  AND t2.ord = t3.ord
  AND t3.ord = t4.ord
  AND t4.ord = t5.ord
  AND t5.ord = t6.ord
`

type BatchInsertUserToChannelChatParams struct {
	Content    []string
	ReplyOf    []int64
	FromUserID []int64
	ChannelID  []int64
	Type       []string
	TimeAt     []int64
}

func (q *Queries) BatchInsertUserToChannelChat(ctx context.Context, arg BatchInsertUserToChannelChatParams) error {
	_, err := q.db.Exec(ctx, batchInsertUserToChannelChat,
		arg.Content,
		arg.ReplyOf,
		arg.FromUserID,
		arg.ChannelID,
		arg.Type,
		arg.TimeAt,
	)
	return err
}

const batchInsertUserToUserChat = `-- name: BatchInsertUserToUserChat :exec
INSERT INTO user_to_user_chat_mapping (content, from_user_id, to_user_id, reply_of, type, time_at)
SELECT
    u_content,
    u_from_user_id,
    u_to_user_id,
    u_reply_of,
    u_type::message_type,
        u_time_at
FROM unnest($1::TEXT[]) WITH ORDINALITY AS t1(u_content, ord),
     unnest($2::BIGINT[]) WITH ORDINALITY AS t2(u_from_user_id, ord),
     unnest($3::BIGINT[]) WITH ORDINALITY AS t3(u_to_user_id, ord),
     unnest(ARRAY(SELECT CASE WHEN x = 0 THEN NULL ELSE x END FROM unnest($4::BIGINT[]) AS x)) WITH ORDINALITY AS t4(u_reply_of, ord),
     unnest($5::TEXT[]) WITH ORDINALITY AS t5(u_type, ord),
     unnest($6::BIGINT[]) WITH ORDINALITY AS t6(u_time_at, ord)
WHERE t1.ord = t2.ord
  AND t2.ord = t3.ord
  AND t3.ord = t4.ord
  AND t4.ord = t5.ord
  AND t5.ord = t6.ord
`

type BatchInsertUserToUserChatParams struct {
	Content    []string
	FromUserID []int64
	ToUserID   []int64
	ReplyOf    []int64
	Type       []string
	TimeAt     []int64
}

func (q *Queries) BatchInsertUserToUserChat(ctx context.Context, arg BatchInsertUserToUserChatParams) error {
	_, err := q.db.Exec(ctx, batchInsertUserToUserChat,
		arg.Content,
		arg.FromUserID,
		arg.ToUserID,
		arg.ReplyOf,
		arg.Type,
		arg.TimeAt,
	)
	return err
}
